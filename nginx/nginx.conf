events {
    worker_connections 1024;
}

http {
    server {
        listen 80;

        # Redirect requests for asusrouter to asusrouter.lan
        server_name asusrouter;

        return 301 http://asusrouter.lan$request_uri;
    }

    # Optional: Proxy requests for asusrouter.lan to 192.168.1.1
    server {
        listen 80;
        server_name asusrouter.lan;

        location / {
            proxy_pass http://192.168.1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Optional: Redirect other bare domains if needed (e.g., mainpc, pihole)
    server {
        server_name mainpc;
        return 301 http://mainpc.lan$request_uri;
    }

    server {
        server_name pihole;
        return 301 http://pihole.lan$request_uri;
    }

    # Proxy pihole.lan to Pi-hole's web interface (running on port 80 in the pihole container)
    server {
        listen 80;
        server_name pihole.lan;

        location / {
            proxy_pass http://pihole:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
